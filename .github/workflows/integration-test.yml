name: $(Build.SourceBranchName)_$(Build.Reason)_$(majorVersion).$(Build.BuildId)$(Rev:.r)

# Enable CI and PR validation on branches master and dev
on:
  push:
    branches: [ master, dev, pipeline-github-actions, pipeline-int-test ]
  pull_request:
    branches: [ master, dev, pipeline-github-actions ]

env:
  
  RunTestsOnly: false
  
  # Integration test configuration
  AdditionalIntegrationTestArguments: ''
  IntegrationTestsToRun: ''
  IoTEdgeDeviceAMD: ''
  
  # Major version
  majorVersion: 1.0.0

  # image tag prefix for master branch (0.2.0)
  MASTER_IMAGE_TAG: ''

  # image tag prefix for dev branch (0.3.0-dev)
  DEV_IMAGE_TAG: dev

  buildConfiguration: 'Release'

  edgeAgentVersion: 1.0.7
  edgeHubVersion: 1.0.7
  edgeHubRoute: FROM /* INTO $upstream

  # Defines the name of the VSTS agent in ARM architecture
  vstsAgentARM: myAgent-arm32v7

  # Defines the name of the VSTS agent in AMD64 architecture
  vstsAgentAMD: myAgent-amd64

  # Network Server module level: 1 in order to get decoder information
  networkServerLogLevel: 1

  # IoT Edge Runtime configuration
  EDGE_AGENT_VERSION: $(edgeAgentVersion)
  EDGE_HUB_VERSION: $(edgeHubVersion)
  EDGEHUB_OPTIMIZEFORPERFORMANCE: false
  EDGEHUB_MQTTSETTINGS_ENABLED: false
  EDGEHUB_HTTPSETTINGS_ENABLED: false
  EDGEHUB_ROUTE: $(edgeHubRoute)
  
  # LoRaWan Modules
  NET_SRV_LOG_LEVEL: $(networkServerLogLevel)  
  NET_SRV_LOGTO_UDP: true
  NET_SRV_LOGTO_HUB: false
  NET_SRV_IOTEDGE_TIMEOUT: 0
  NET_SRV_VERSION: "" # Network Server module version
  NET_SRV_LOG_TO_UDP_ADDRESS: 10.164.74.151 # Hostname of test runner
  PKT_FWD_VERSION: "" # Packet Forward module version
  
jobs:

  test_runner_amd_eu:
    name: Run tests in AMD device (EU)
    strategy:
      matrix:
        testsToRun: [OTAAJoinTest]
    # needs: 
      # - full_ci_deploy_amd
      # - full_ci_deploy_facade_function
    runs-on: [self-hosted, x64]
    # if: env.IoTEdgeDeviceAMD != '' || env.RunTestsOnly == 'true'
    timeout-minutes: 60
    env:      
      INTEGRATIONTEST_LeafDeviceSerialPort: '/dev/ttyACM0'
      INTEGRATIONTEST_IoTHubEventHubConsumerGroup: 'reserved_integrationtest_amd'
      INTEGRATIONTEST_LeafDeviceGatewayID: ''
      INTEGRATIONTEST_DevicePrefix: ''
      INTEGRATIONTEST_EnsureHasEventDelayBetweenReadsInSeconds: 15
      INTEGRATIONTEST_EnsureHasEventMaximumTries: 5
    
    steps:
      
    - uses: actions/checkout@v2
          
    - name: 'Configure test in **/test/LoRaWan.IntegrationTest/appsettings.json' 
      uses: cschleiden/replace-tokens@v1
      with:
        files: '**/test/LoRaWan.IntegrationTest/appsettings.json'
      env:
        INTEGRATIONTEST_IoTHubEventHubConnectionString: ${{ secrets.INTEGRATIONTEST_IoTHubEventHubConnectionString }}
        INTEGRATIONTEST_IoTHubEventHubConsumerGroup: ${{ env.INTEGRATIONTEST_IoTHubEventHubConsumerGroup }}
        INTEGRATIONTEST_IoTHubConnectionString: ${{ secrets.INTEGRATIONTEST_IoTHubConnectionString }}
        INTEGRATIONTEST_EnsureHasEventDelayBetweenReadsInSeconds: ${{ env.INTEGRATIONTEST_EnsureHasEventDelayBetweenReadsInSeconds }}
        INTEGRATIONTEST_EnsureHasEventMaximumTries: ${{ env.INTEGRATIONTEST_EnsureHasEventMaximumTries }}
        INTEGRATIONTEST_LeafDeviceSerialPort: ${{ env.INTEGRATIONTEST_LeafDeviceSerialPort }}
        INTEGRATIONTEST_LeafDeviceGatewayID: ${{ env.INTEGRATIONTEST_LeafDeviceGatewayID }}
        INTEGRATIONTEST_DevicePrefix: ${{ env.INTEGRATIONTEST_DevicePrefix }}
        INTEGRATIONTEST_FunctionAppCode: ${{ secrets.INTEGRATIONTEST_FunctionAppCode }}
        INTEGRATIONTEST_FunctionAppBaseUrl: ${{ secrets.INTEGRATIONTEST_FunctionAppBaseUrl }}
      
    # Runs Integration testing only if no additional integration test arguments were passed
    - name: Build IntegrationTest
      run: dotnet build --configuration ${{ env.buildConfiguration }} **/test/LoRaWan.IntegrationTest/LoRaWan.IntegrationTest.csproj

    - name: Integration testing ${{ matrix.testsToRun }}
      if: (env.AdditionalIntegrationTestArguments == '' && env.IntegrationTestsToRun == '') || contains(env.IntegrationTestsToRun, '${{ matrix.testsToRun }}')
      run: |
        echo ${{ matrix.testsToRun }} 
        dotnet test --no-build --configuration ${{ env.buildConfiguration }} -p:ParallelizeTestCollections=false --filter LoRaWan.IntegrationTest.${{ matrix.testsToRun }} **/test/LoRaWan.IntegrationTest/LoRaWan.IntegrationTest.csproj
      
    # Run integration test with filters only, no built-in retries
    - name: Run integration test with additional arguments (no retry)
      if: env.AdditionalIntegrationTestArguments != ''
      run: dotnet test --configuration ${{ env.buildConfiguration }} -p:ParallelizeTestCollections=false ${{ env.AdditionalIntegrationTestArguments }} **/test/LoRaWan.IntegrationTest/LoRaWan.IntegrationTest.csproj
